<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace属性:用于指定当前的映射文件和那个接口进行映射，需要指定接口文件路径，需要标注包的完整路径接口 -->
<mapper namespace="com.couture.store.mapper.UserMapper">
    <!-- 自定义映射规则：resultMap 标签来完成映射规则的定义
     id属性：标签给这个映射负责分配一个唯一的id值，对应的就是resultMap="id属性的值"属性的取值
     type属性：取值一个类，表示的是数据库中的查询结果与java中那个实体类进行结果集的映射
     -->
    <resultMap id="UserEntityMap" type="com.couture.store.entity.User">
        <!-- 将表的资源和类属性不一致的字段属性不一致的字段进行匹配，名称一致的字段可以省略不写 -->

        <!--
             配合完成名称不一致的映射
             column属性：表示表中属性名称
             property属性：表示类中的属性名称
         -->

        <!-- 自定规则的时候主键是不能省略的 -->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>


    <!-- id属性：表示映射的接口中方法的名称，直接在标签的内容来编写SQL语句
        useGeneratedKeys属性：表示开启某个字段的递增（主键设置为递增）
        keyProperty属性：标签将表中的那个字段作为主键进行递增
     -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO
            store.t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)
        VALUES
            (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>


    <select id="findByUsername" resultMap="UserEntityMap">
        select *
        from store.t_user
        where username = #{username}
    </select>

    <update id="updatePasswordByUid">
        UPDATE
            store.t_user
        SET
            password = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = ${uid}
    </update>

    <select id="findByUid" resultMap="UserEntityMap">
        select * from store.t_user where uid=#{uid}
    </select>

    <update id="updateInfoByUid">
        update store.t_user set
        <if test="phone != null">phone = #{phone},</if>
        <if test="email != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        WHERE
        uid = #{uid}
    </update>
    <update id="updateAvatarByUid">
        update store.t_user set avatar=#{avatar},
                                modified_user = #{modifiedUser},
                                modified_time = #{modifiedTime}
        where
            uid=#{uid}
    </update>
</mapper>